@typeparam TItem where TItem : class, new()
@using SurveyAuth.Data
@using Microsoft.EntityFrameworkCore
@using static PropertyHelper

<h1 class="title-spacing">Add/Edit @(typeName + "s")</h1>
<div>
    <p>(Select below to edit or add new @typeName)</p>
    <select @onchange="SelectItem" aria-label="Select @typeName">
        @foreach (var item in Items)
        {
            <option value="@GetId(item)">
                @GetDisplayName(item)
            </option>
        }
    </select>  
</div>

@if (IsNewItem(SelectedItem))    
{
    <h4 class="edit-survey">Add new @typeName</h4>
}
else        
{
    <h4 class="edit-survey">Modify existing @typeName</h4>
}

<table class="table table-survey" aria-label="@typeName table">                                
    <thead>
        <tr> 
            @foreach (var prop in typeof(TItem).GetProperties())
            {                
                <th>@prop.Name</th>                    
            }
        </tr>
    </thead>
    <tbody>
        <tr>
            @foreach (var prop in typeof(TItem).GetProperties())
            {                
                <td>
                    <PropertyDisplay Property="prop" Item="SelectedItem" />
                </td>
            }                        
        </tr>
    </tbody>
</table>

@if (IsNewItem(SelectedItem))  
{
    <button type="submit" class="btn btn-primary" @onclick="@(async () => await AddItem(SelectedItem))" disabled="@SelectedItem == null">Add</button>   
}
else    
{
    <button class="btn btn-primary" @onclick="UpdateSelectedItemAsync">Update</button>
    <button class="btn btn-primary" @onclick="DeleteSelectedItemAsync">Delete</button>
}

@code {
    private string typeName = typeof(TItem).Name.Split('.').Last();    
    private List<TItem> Items { get; set; }
    private TItem SelectedItem { get; set; }

    protected override async Task OnInitializedAsync()
    {        
        Items = await GetItems<TItem>();
        SelectedItem = new TItem();
        SelectedItem = (TItem)InitializeItem(SelectedItem);
        Items.Insert(0, SelectedItem); // Add "New Item" option
    }

    private async void SelectItem(ChangeEventArgs e)
    {        
        int itemId = int.Parse(e.Value.ToString());
        var selectedItem = await GetItemById<TItem>(itemId);
        SelectedItem = selectedItem ?? new TItem();
    }

    private async Task UpdateSelectedItemAsync()
    {
        await UpdateItem(SelectedItem);
        await OnInitializedAsync();
    }

    private async Task DeleteSelectedItemAsync()
    {
        await DeleteItem(SelectedItem);
        await OnInitializedAsync();
    }

    private async Task AddNewItemAsync()
    {
        await AddItem(SelectedItem);
        await OnInitializedAsync();
    }
}

