@typeparam TItem where TItem : class
@using SurveyAuth.Data
@inject ApplicationDbContext DbContext
@using Microsoft.EntityFrameworkCore


<h1 class="title-spacing">Add/Edit @(typeName + "s")</h1>
<div>
    <p>(Select below to edit or add new @typeName)</p>
    <select @onchange="(e) => SelectItem((TItem)e.Value)">
        @foreach (var item in Items)
        {
            <option value="@item?.GetType().GetProperties()[0].GetValue(item)">
                @item?.GetType().GetProperties()[0].GetValue(item) - @item?.GetType().GetProperties()[1].GetValue(item)
            </option>
        }
    </select>  
</div>

@code {
    private string typeName = typeof(TItem).Name.Split('.').Last();    
    private List<TItem> Items { get; set; }
    private TItem SelectedItem { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Items = await DbContext.Set<TItem>().ToListAsync();
    }    

    private void SelectItem(TItem item)
    {
        SelectedItem = item;
    }

        private async Task AddNewItem()
    {
        var newItem = Activator.CreateInstance<TItem>();
        DbContext.Set<TItem>().Add(newItem);
        await DbContext.SaveChangesAsync();
        Items = await DbContext.Set<TItem>().ToListAsync();
    }

    private async Task EditItem()
    {
        DbContext.Set<TItem>().Update(SelectedItem);
        await DbContext.SaveChangesAsync();
        Items = await DbContext.Set<TItem>().ToListAsync();
    }

    private async Task DeleteItem()
    {
        DbContext.Set<TItem>().Remove(SelectedItem);
        await DbContext.SaveChangesAsync();
        Items = await DbContext.Set<TItem>().ToListAsync();
    }
}


