@typeparam TItem where TItem : class, new()
@using Microsoft.AspNetCore.Components
@using System.Reflection
@inject ItemUpdateService UpdateService
@using static ItemHelper

<select @onchange="OnSelectItem" aria-label="Select @typeName">
    @foreach (var item in Items)
    {
        <option value="@GetId(item)" selected="@(IsSelected(item))">
            @GetDropDownDisplay(item)
        </option>
    }
</select>

@code 
{   
    [Parameter]
    public EventCallback<TItem> OnItemSelected { get; set; }
    
    private string typeName { get; set; }  

    private List<TItem> Items { get; set; }

    [CascadingParameter]
    public TItem SelectedItem { get; set; } 


    protected override async Task OnParametersSetAsync()
    {        
    }

    protected override async Task OnInitializedAsync()
    {
        UpdateService.OnItemUpdated += async () => await Refresh();     // Call refresh from ItemEdit
        if (Items == null || !Items.Any() || SelectedItem == null)      // Call refresh on initialization   
        {
            await Refresh();
        }
    }

    public async Task Refresh()
    {
        typeName = typeof(TItem).Name;
        Items = await new TItem().GetItemsAsync();            
        SelectedItem = new TItem().InitializeItem(); 
        Items.Insert(0, SelectedItem);
        //OnItemSelected.InvokeAsync(SelectedItem);     // Wrongly updates previously selected Question with 'New Survey'  
        // StateHasChanged();   // Consider adding this, though it works without it too
    
    }

    private void OnSelectItem(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int itemId))
        {
            var idProperty = typeof(TItem).GetProperty("Id");
            SelectedItem = Items.FirstOrDefault(i => idProperty != null && (int)idProperty.GetValue(i) == itemId);
        }
        OnItemSelected.InvokeAsync(SelectedItem);        
    }

    private bool IsSelected(TItem item)
    {
        var idProperty = typeof(TItem).GetProperty("Id");
        return idProperty != null && SelectedItem != null && idProperty.GetValue(item).Equals(idProperty.GetValue(SelectedItem));
    }
}