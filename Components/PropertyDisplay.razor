@using Microsoft.AspNetCore.Components
@using System.Reflection
@using static PropertyHelper


@if (IsReadOnly(property, SelectedItem))
{
    <p>@GetValue(SelectedItem, property.Name)</p>
}
else
{
    @switch (property.PropertyType.Name)
    {
        case "String":
            <input type="text" value="@GetValue(SelectedItem, property.Name)"
                @oninput="(e) => property.SetValue(SelectedItem, e.Value)" />
                
            break;
        case "Int32":
            <input type="number" value="@GetValue(SelectedItem, property.Name)" 
                    style="@GetFieldWidthStyle(SelectedItem, property)" />
            break;
        case "DateOnly":
            <ItemDate Item="SelectedItem" PropertyName="@property.Name" />                                    
            break;
        case "Boolean":
            <input type="checkbox" checked="@((bool)GetValue(SelectedItem, property.Name))" 
                @onchange="(e) => property.SetValue(SelectedItem, (bool)((ChangeEventArgs)e).Value)" />
            break;
        default:
            <input type="text" value="@GetValue(SelectedItem, property.Name)" @oninput="(e) => property.SetValue(SelectedItem, Convert.ChangeType(e.Value, property.PropertyType))" />
            break;
    }
}

@code {
    [Parameter]
    public object SelectedItem { get; set; }

    [Parameter]
    public PropertyInfo property { get; set; }
}