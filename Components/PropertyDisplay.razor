@using Microsoft.AspNetCore.Components
@using System.Reflection
@using static PropertyHelper


@if (!IsHidden(Property, Item))
{
    @switch (Property.PropertyType.Name)
    {
        case "Int32":
            if (IsReadOnly(Property, Item))
            {
                <p>@GetValue(Item, Property)</p>
            }
            else
            {
                <input type="number" style="width: @width}px" @bind="_valueAsString" />
            }            
            break;
        case "String":
            <input type="text" @bind="_valueAsString" />
            break;
        case "Boolean":
            <input type="checkbox" @bind="_valueAsBool" />
            break;
        case "DateOnly":
            <input type="date" @bind="_valueAsDateOnly" />
            break;
        default:
            <p>@GetValue(Item, Property)</p>
            break;
    }
}

@code {
    
    [Parameter]
    public PropertyInfo Property { get; set; }

    [Parameter]
    public object Item { get; set; }

    int? width;

    private object _value;

    private string _valueAsString
    {
        get => GetValueAsString();
        set => SetValueFromString(value);
    }

    private bool _valueAsBool
    {
        get => (bool)_value;
        set => SetValue(value);
    }

    private DateOnly _valueAsDateOnly
    {
        get => (DateOnly)_value;
        set => SetValue(value);
    }

    protected override void OnParametersSet()
    {
        _value = Property.GetValue(Item);
        width = PropertyHelper.GetFieldWidth(Property, Item);
    }

    private object GetValue(object item, PropertyInfo property)
    {
        return property.GetValue(item);
    }

    private void SetValue(object value)
    {
        Property.SetValue(Item, value);
    }

    private string GetValueAsString()
    {
        return _value?.ToString();
    }

    private void SetValueFromString(string value)
    {
        if (Property.PropertyType == typeof(bool))
        {
            SetValue(bool.Parse(value));
        }
        else if (Property.PropertyType == typeof(DateTime))
        {
            SetValue(DateTime.Parse(value));
        }
        else
        {
            SetValue(value);
        }
    }    
}