@page "/surveys"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using SurveyAuth.Data
@using SurveyAuth.Models
@inject ApplicationDbContext DbContext
@using System.ComponentModel.DataAnnotations

<PageTitle>Surveys - Blazor</PageTitle>

<h1 class="title-spacing">Add/Edit Surveys</h1>

<div>
    <p>(Select below to edit or add new Survey)</p>
    <select @onchange="OnSurveySelected">
        @foreach(var survey in AllSurveys)
        {
            <option value="@survey.Id">(@survey.Id) @survey.Name</option>    
        }
    </select>
</div>

@if (selectedSurveyId <= 0)    // Option new Survey has been selected by user or default
{
    <h4 class="edit-survey">Add new survey</h4>
    <EditForm EditContext="EditContext" OnValidSubmit="@AddSurvey">
    <DataAnnotationsValidator />
    <ValidationSummary />            

    <table class="table table-survey">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Description</th>
                <th>Start date</th>
                <th>End date</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <p>@Survey.Id </p>
                </td>
                <td>
                    <input type="text" @bind="Survey.Name" />
                    <ValidationMessage For="@(() => Survey.Name)" />
                </td>
                <td>
                    <input type="text" @bind="Survey.Description" />
                </td>
                <td>
                    <input type="date" @bind="Survey.StartDate" />
                </td>
                <td>
                    <input type="date" @bind="Survey.EndDate" />
                </td>
            </tr>
        </tbody>
    </table>

    <button type="submit" class="btn btn-primary" @onclick="AddSurvey" disabled="@(Survey.Name == null)">Add</button>   
    <ValidationMessage For="@(() => CustomErrorMessage)" />
    @if (CustomErrorMessage != null)
    {
        <div class="text-danger">@CustomErrorMessage</div>
    }
    </EditForm>     
}
else if (selectedSurveyId > 0)    // An existing Survey has been selected
{
    <h4 class="edit-survey">Modify existing survey</h4>
    <table class="table table-survey">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Description</th>
                <th>StartDate</th>
            </tr>
        </thead>
        <tbody>            
            <tr>
                <td>
                    <input type="number" @bind="selectedSurvey.Id" />
                </td>
                <td>
                   <input type="text" @bind="selectedSurvey.Name" />
                </td>
                <td>
                   <input type="text" @bind="selectedSurvey.Description" />
                </td>
                <td>
                    <input type="date" @bind="selectedSurvey.StartDate" />
                </td>
                <td>
                    <input type="date" @bind="selectedSurvey.EndDate" />
                </td>
            </tr>
        </tbody>
    </table>

    <button class="btn btn-primary" @onclick="SaveSurvey">Update</button>
    <button class="btn btn-primary" @onclick="DeleteSurvey">Delete</button>
}

@code
{
    private EditContext EditContext {get; set;} = new EditContext(new Survey());
    private string CustomErrorMessage {get; set;}
    private int selectedSurveyId = 0;
    private Survey? selectedSurvey;
    public List<Survey> AllSurveys = new List<Survey>();    
    protected override async Task OnInitializedAsync()
    {        
        Survey = new Survey();
        // Load all Surveys once
        AllSurveys = await DbContext.Surveys.ToListAsync();
        AllSurveys.Insert(0, new Survey { Id = -1, Name = "New Survey" }); // Add "New Survey" option
    }

    private async Task OnSurveySelected(ChangeEventArgs e)
    {
        ClearErrorMessages();
        selectedSurveyId = int.Parse(e.Value.ToString());
        selectedSurvey = await DbContext.Surveys.FirstOrDefaultAsync(q => q.Id == selectedSurveyId);
    }

    private void ClearErrorMessages()
    {
        CustomErrorMessage = string.Empty;
        EditContext = new EditContext(Survey);  // Reset validation
    }
    
    private async Task SaveSurvey ()
    {
        try
        {
            await DbContext.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            HandleException(ex);
        }
    }

    private async Task DeleteSurvey()
    {
        try
        {
            DbContext.Remove(selectedSurvey);
            await DbContext.SaveChangesAsync();
        }
        catch (Exception ex)
        {
            HandleException(ex);
        }
    }

    private Survey Survey = new Survey();
    private async Task AddSurvey()
    {
        try
        {
            ClearErrorMessages();
            // Check for existing survey
            var exist = await DbContext.Surveys.FirstOrDefaultAsync(q => q.Id == Survey.Id);
            if (exist != null)
            {
                selectedSurveyId = Survey.Id;
                selectedSurvey = exist;
                return;
            }

            // Create new survey
            var newS = new Survey 
            {
                //Id = Survey.Id,   // Does the db automatically increment Id?
                Name = Survey.Name,
                Description = Survey.Description,
                StartDate = Survey.StartDate,
                EndDate = Survey.EndDate
            };

            // Begin transaction
            using (var dbContextTransaction = await DbContext.Database.BeginTransactionAsync())
            {
                // If getting an error, uncomment the next line
                //DbContext.ChangeTracker.Clear();
                DbContext.Surveys.Add(newS);
                await DbContext.SaveChangesAsync();
                await dbContextTransaction.CommitAsync();
            }

            // Reload data
            await OnInitializedAsync();
            //Survey = new Survey();
        }
        catch (Exception ex)
        {
            HandleException(ex);
        }
    }

    private void HandleException(Exception ex)
    {
        if (ex is DbUpdateException dbUpdateEx)
        {
            CustomErrorMessage = $"Database update failed. Please try again. {dbUpdateEx.InnerException?.Message}";
        }
        else if (ex is ValidationException validationEx)
        {
            CustomErrorMessage = validationEx.Message + validationEx.InnerException?.Message;
        }
        else
        {
            CustomErrorMessage = "An unexpected error occurred. Please try again." + ex.Message + ex.InnerException?.Message;
        }
        EditContext.NotifyValidationStateChanged();
    }
}    
