@typeparam TItem where TItem : class, new()
@using SurveyAuth.Data
@inject ApplicationDbContext DbContext
@using Microsoft.EntityFrameworkCore
@using static PropertyHelper

<h1 class="title-spacing">Add/Edit @(typeName + "s")</h1>
<div>
    <p>(Select below to edit or add new @typeName)</p>
    <select @onchange="SelectItem">
        @foreach (var item in Items)
        {
            var id = @item?.GetType().GetProperties()[0].GetValue(item).ToString();
            <option value="@id">
                @id - @item?.GetType().GetProperties()[1].GetValue(item)
            </option>
        }
    </select>  
</div>

@if ((int)SelectedItem.GetType().GetProperties()[0].GetValue(SelectedItem) == -1)    // Option new item has been selected = SelectedItem is empty
{
    <h4 class="edit-survey">Add new @typeName</h4>
}
else        // Option existing item has been selected = SelectedItem has values
{
    <h4 class="edit-survey">Modify existing @typeName</h4>
}

    <table class="table table-survey">                                
       <thead>
            <tr> 
                @foreach (var prop in typeof(TItem).GetProperties())
                {                
                    <th>@prop.Name</th>                    
                }
            </tr>
        </thead>
        <tbody>
            <tr>
                @foreach (var item in Items)
                {                
                    <td>
                        @item?.GetType().GetProperties()[0].GetValue(item) - @item?.GetType().GetProperties()[1].GetValue(item)
                    </td>             
                }
            </tr>
        </tbody>
    </table>
@if (SelectedItem == null)  // Option new item has been selected = SelectedItem is empty
{
    <button type="submit" class="btn btn-primary" @onclick="AddNewItem" disabled="@SelectedItem == null">Add</button>   
}
else    // An existing item has been selected
{
    <button class="btn btn-primary" @onclick="EditItem">Update</button>
    <button class="btn btn-primary" @onclick="DeleteItem">Delete</button>
}

@code {
    private string typeName = typeof(TItem).Name.Split('.').Last();    
    private List<TItem> Items { get; set; }
    private TItem SelectedItem { get; set; }

    protected override async Task OnInitializedAsync()
    {
        SelectedItem = new TItem();     // Initialize to an empty item
        var id = typeof(TItem).GetProperties()[0];
        var name = typeof(TItem).GetProperties()[1];
        id.SetValue(SelectedItem, Convert.ChangeType(-1, id.PropertyType));
        name.SetValue(SelectedItem, Convert.ChangeType("New Item", name.PropertyType));

        Items = await DbContext.Set<TItem>().ToListAsync();
        //var newItem = Activator.CreateInstance<TItem>();
        Items.Insert(0, SelectedItem); // Add "New Item" option
    }   

    private void SelectItem(ChangeEventArgs e)
    {
        var selectedItem = (TItem)e.Value;
        if (selectedItem?.GetType().GetProperties()[0].GetValue(selectedItem).ToString() == "-1")
        {
            SelectedItem = new TItem();     // Start with empty item
        }
        else
        {
            SelectedItem = selectedItem;    // Item selected from the drop down list
        }
    }

    private async Task AddNewItem()
    {
        var newItem = Activator.CreateInstance<TItem>();
        DbContext.Set<TItem>().Add(newItem);
        await DbContext.SaveChangesAsync();
        Items = await DbContext.Set<TItem>().ToListAsync();
    }

    private async Task EditItem()
    {
        DbContext.Set<TItem>().Update(SelectedItem);
        await DbContext.SaveChangesAsync();
        Items = await DbContext.Set<TItem>().ToListAsync();
    }

    private async Task DeleteItem()
    {
        DbContext.Set<TItem>().Remove(SelectedItem);
        await DbContext.SaveChangesAsync();
        Items = await DbContext.Set<TItem>().ToListAsync();
    }
}


